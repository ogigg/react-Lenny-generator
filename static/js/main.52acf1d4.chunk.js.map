{"version":3,"sources":["lennyComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Lenny","props","componentDidMount","enqueueSnackbar","anchorOrigin","vertical","horizontal","handleClick","copyToClipboard","variant","el","document","createElement","value","lenny","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","state","open","className","onClick","this","Component","withSnackbar","App","lennyMouthList","lennyEyesList","lennyHandsList","lennyOuterList","handleChange","event","setState","lennyMouth","target","updateLenny","lennyFace","lennyHands","split","lennyOuter","lennyEyes","MenuItemList","list","map","item","MenuItem","maxSnack","autoHideDuration","Grid","container","spacing","alignItems","xs","Paper","Select","id","onChange","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52acf1d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './lennyComponent.css'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\nimport { withSnackbar } from 'notistack';\r\n\r\nclass Lenny extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n          };\r\n    }\r\n    componentDidMount=()=>{\r\n        this.props.enqueueSnackbar('Kliknij na lenny face aby skopiować!',{anchorOrigin: {vertical: 'top',horizontal: 'center',}});\r\n    }\r\n    //enqueueSnackbar = useSnackbar();\r\n    handleClick=()=>{\r\n        this.copyToClipboard();\r\n        this.props.enqueueSnackbar('Skopiowano!',{variant: 'success',},\r\n        {anchorOrigin: {vertical: 'top',horizontal: 'right',}});\r\n    }\r\n\r\n    copyToClipboard = () =>{\r\n        const el = document.createElement('textarea');\r\n        el.value = this.props.lenny;\r\n        el.setAttribute('readonly', '');\r\n        el.style.position = 'absolute';\r\n        el.style.left = '-9999px';\r\n        document.body.appendChild(el);\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n    }\r\n  render() {\r\n    return(\r\n        <div className=\"lenny-wrapper\">\r\n            <div className=\"lenny\" onClick={this.handleClick}>\r\n                \r\n                {this.props.lenny}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withSnackbar(Lenny); \r\n\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\"\r\nimport './App.css';\r\nimport Lenny from './lennyComponent'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lennyFace : \"( ͡° ͜ʖ ͡°)\",\r\n      lennyMouth: ' ͜ʖ',\r\n      lennyEyes: ' ͡°. ͡°',\r\n      lennyHands: '.',\r\n      lennyOuter: '(.)'\r\n    };\r\n  }\r\n\r\n  lennyMouthList = [' ഌ',' ͜ʖ','  ͟ʖ','v',' ෴','o','_','-,-','+','*','Ꮂ','⏏','‿','‿‿','Д','ʖ̯',]\r\n  lennyEyesList = ['*.*',' ͡°. ͡°','°.°','ಠ.ಠ','•.•','｡•.•｡','＾.＾','^.^','ﾟ.ﾟ',' ͡€. ͡€','｡◕.◕｡']\r\n  lennyHandsList = ['.','\\\\./','-.-','>=.=<','~.~','/./','づ.づ','[̲̅$̲̅(̲̅.)̲̅$̲̅]','ᕦ.ᕥ','乁.ㄏ','٩.۶','ლ.ლ','.つ──☆*:・ﾟ','¯\\\\_._/¯','ᕦ.ᕤ']\r\n  lennyOuterList = ['.','[.]','q.p','(.)','<.>','!.!','|.|','ᔑ.ᔐ']\r\n\r\n\r\n\r\n  handleChange = (event) =>{\r\n    this.setState({lennyMouth: event.target.value},this.updateLenny);\r\n  }\r\n\r\n  updateLenny = () =>{\r\n    this.setState({\r\n      lennyFace: this.state.lennyHands.split('.')[0]+\r\n      this.state.lennyOuter.split('.')[0]+\r\n      this.state.lennyEyes.split('.')[0]+\r\n      this.state.lennyMouth+\r\n      this.state.lennyEyes.split('.')[1]+\r\n      this.state.lennyOuter.split('.')[1]+\r\n      this.state.lennyHands.split('.')[1]\r\n    })\r\n  }\r\n  MenuItemList = (list) =>{\r\n    return(\r\n      list.map((item) =>\r\n      <MenuItem value={item}>\r\n        {item}\r\n      </MenuItem>\r\n  ));\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div>\r\n      <SnackbarProvider maxSnack={5} anchorOrigin={{vertical: 'top',horizontal: 'right',}} autoHideDuration='800'>\r\n      <Lenny lenny={this.state.lennyFace}/>\r\n      </SnackbarProvider>  \r\n      <div className=\"menu-wrapper\">\r\n        <Grid container spacing={1} alignItems={'center'}>\r\n          <Grid container item spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Paper className=\"menu-label\" >Usta</Paper>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Paper>\r\n                <Select\r\n                  className=\"select\"\r\n                  id=\"lennyMouth\" \r\n                  value={this.state.lennyMouth}\r\n                  onChange={(event) => {this.setState({lennyMouth: event.target.value},this.updateLenny);}}\r\n                >\r\n                {this.MenuItemList(this.lennyMouthList)}\r\n                </Select>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Paper className=\"menu-label\" >Oczy</Paper>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Paper>\r\n                <Select\r\n                  className=\"select\"\r\n                  id=\"lennyEyes\"\r\n                  value={this.state.lennyEyes}\r\n                  onChange={(event) => {this.setState({lennyEyes: event.target.value},this.updateLenny);}}\r\n                >\r\n                {this.MenuItemList(this.lennyEyesList)}\r\n                </Select>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Paper className=\"menu-label\">Uszy</Paper>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Paper>\r\n                <Select\r\n                  className=\"select\"\r\n                  id=\"lennyOuter\"\r\n                  value={this.state.lennyOuter}\r\n                  onChange={(event) => {this.setState({lennyOuter: event.target.value},this.updateLenny);}}\r\n                >\r\n                {this.MenuItemList(this.lennyOuterList)}\r\n                </Select>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item spacing={1}>\r\n            <Grid item xs={3}>\r\n              <Paper className=\"menu-label\">Ręce</Paper>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Paper>\r\n                <Select\r\n                  className=\"select\"\r\n                  id=\"lennyHands\"\r\n                  value={this.state.lennyHands}\r\n                  onChange={(event) => {this.setState({lennyHands: event.target.value},this.updateLenny);}}\r\n                >\r\n                {this.MenuItemList(this.lennyHandsList)}\r\n                </Select>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid> \r\n      </div>\r\n      \r\n    </div>\r\n\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}